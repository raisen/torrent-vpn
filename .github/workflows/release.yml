name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # macOS builds - native compilation
          - platform: darwin-amd64
            runner: macos-13  # Intel runner
            package_target: package-darwin
            archive_name: TorrentVPNManager-darwin-amd64.tar.gz
          - platform: darwin-arm64
            runner: macos-latest  # ARM runner
            package_target: package-darwin
            archive_name: TorrentVPNManager-darwin-arm64.tar.gz

          # Windows builds - native compilation
          - platform: windows-amd64
            runner: windows-latest
            package_target: package-windows
            archive_name: TorrentVPNManager-windows-amd64.zip

          # Linux builds - native compilation
          - platform: linux-amd64
            runner: ubuntu-latest
            package_target: package-linux
            archive_name: TorrentVPNManager-linux-amd64.tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    # Install platform-specific dependencies
    - name: Install Linux dependencies
      if: contains(matrix.platform, 'linux')
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc libc6-dev libgl1-mesa-dev xorg-dev

    # Build using Makefile (native compilation for each platform)
    - name: Build application
      working-directory: gui
      run: make build

    # Generate icon and package using Makefile
    - name: Generate icon
      working-directory: gui
      run: make icon

    - name: Package application
      working-directory: gui
      run: make ${{ matrix.package_target }}

    # Create archives for release
    - name: Create macOS archive
      working-directory: gui
      if: contains(matrix.platform, 'darwin')
      run: |
        # For macOS, the package target creates the .app bundle in dist/
        tar -czf ${{ matrix.archive_name }} -C dist TorrentVPNManager.app

    - name: Create Windows archive
      working-directory: gui
      if: contains(matrix.platform, 'windows')
      run: |
        # For Windows, create a distribution folder with the .exe
        mkdir -p dist/TorrentVPNManager
        cp build/torrent-vpn-manager.exe dist/TorrentVPNManager/TorrentVPNManager.exe
        cp ../README.md dist/TorrentVPNManager/
        cp ../docker-compose.example.yml dist/TorrentVPNManager/
        cd dist
        powershell Compress-Archive -Path TorrentVPNManager -DestinationPath ../${{ matrix.archive_name }}

    - name: Create Linux archive
      working-directory: gui
      if: contains(matrix.platform, 'linux')
      run: |
        # For Linux, create a distribution folder with the binary
        mkdir -p dist/TorrentVPNManager
        cp build/torrent-vpn-manager dist/TorrentVPNManager/TorrentVPNManager
        chmod +x dist/TorrentVPNManager/TorrentVPNManager
        cp ../README.md dist/TorrentVPNManager/
        cp ../docker-compose.example.yml dist/TorrentVPNManager/
        tar -czf ${{ matrix.archive_name }} -C dist TorrentVPNManager

    # Upload artifacts
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}
        path: gui/${{ matrix.archive_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -la ./artifacts/

    - name: Create Release with GitHub CLI
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release notes
        cat > release_notes.md << 'EOF'
        ## What's New in ${{ github.ref_name }}

        ### Download Instructions

        **macOS:**
        - Download `TorrentVPNManager-darwin-amd64.tar.gz` (Intel Macs)
        - Download `TorrentVPNManager-darwin-arm64.tar.gz` (Apple Silicon Macs)
        - Extract and move the .app to your Applications folder

        **Windows:**
        - Download `TorrentVPNManager-windows-amd64.zip`
        - Extract and run the executable

        **Linux:**
        - Download `TorrentVPNManager-linux-amd64.tar.gz`
        - Extract and run the executable

        ### Prerequisites
        - Docker and Docker Compose installed
        - Private Internet Access (PIA) VPN account

        ### Setup
        1. Copy `docker-compose.example.yml` to `docker-compose.yml`
        2. Edit the file with your PIA credentials
        3. Run the application

        For detailed instructions, see the [README](https://github.com/raisen/torrent-vpn/blob/main/README.md).
        EOF

        # Create the release and upload all assets
        gh release create ${{ github.ref_name }} \
          --title "Torrent VPN Manager ${{ github.ref_name }}" \
          --notes-file release_notes.md \
          ./artifacts/darwin-amd64/TorrentVPNManager-darwin-amd64.tar.gz \
          ./artifacts/darwin-arm64/TorrentVPNManager-darwin-arm64.tar.gz \
          ./artifacts/windows-amd64/TorrentVPNManager-windows-amd64.zip \
          ./artifacts/linux-amd64/TorrentVPNManager-linux-amd64.tar.gz
